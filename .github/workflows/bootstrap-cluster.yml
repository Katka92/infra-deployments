name: Bootstrap cluster
on: [ pull_request ]
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    env:
      OC_LOGIN_TOKEN: ${{ secrets.OC_LOGIN_TOKEN }}
      LOGIN_SERVER_URL: "https://api.hac-devsandbox.5unc.p1.openshiftapps.com:6443"
    steps:
      - uses: actions/checkout@v2
      - name: Run bootstrap script
        shell: bash
        id: bootstrap
        timeout-minutes: 30
        run: |
          exit 0
      - name: Unseal vault if sealed
        if: failure()
        env:
          POD_NAME: "vault-0"
        run: |
          echo "unsealing vault"
      - name: Check Application statuses
        id: statuscheck
        if: failure()
        run: |
          healthyAndSynced=true
          if [ $healthyAndSynced ]; then 
            echo "healthy_and_synced=yes" >> $GITHUB_OUTPUT
          else 
            echo "healthy_and_synced=no" >> $GITHUB_OUTPUT
          fi
      - name: Send a message to Slack
        shell: bash
        if: always()
        env: 
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          BOOTSTRAP_JOB_STATUS: ${{ steps.bootstrap.outcome }}
          HEALTHY_AND_SYNCED: ${{ steps.statuscheck.outputs.healthy_and_synced }}
          CHANNEL_ID: "C04U7TA1BT8" # forum-rhtap-test-execution-alerts
          ACTION_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        run: |
          if [[ $HEALTHY_AND_SYNCED == "yes" ]]; then
            statusMessage="Cluster Apps are Healthy and Synced."
          elif [[ $HEALTHY_AND_SNYCED == "no" ]]; then 
            statusMessage="Cluster Apps are NOT Healthy and Synced."
          else
            statusMessage="App Health status is empty."
          fi;

          echo "Status message: $statusMessage"
  cleanup:
    runs-on: ubuntu-latest
    env:
      OC_LOGIN_TOKEN: ${{ secrets.OC_LOGIN_TOKEN }}
      LOGIN_SERVER_URL: "https://api.hac-devsandbox.5unc.p1.openshiftapps.com:6443"
    steps:
      - name: Prune user signups
        run: |
          oc login --token=$OC_LOGIN_TOKEN --server=$LOGIN_SERVER_URL --insecure-skip-tls-verify
          echo "Prune any user spaces older than 2 days"
          oc project toolchain-host-operator
          oc get usersignup -o json | jq -r --argjson timestamp 172800 '.items[] | select ((.metadata.creationTimestamp | fromdateiso8601 < now - $timestamp) and (.metadata.name != "user1")).metadata.name' | xargs -r -L1 oc delete usersignup
