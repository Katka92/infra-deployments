name: Bootstrap cluster
on:
  schedule:
    - cron: '44 4 * *  *'
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run bootstrap script
        shell: bash
        env:
          # getting secrets from GH
          BROKER_PASSWORD: ${{ secrets.BROKER_PASSWORD }}
          MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
          OC_LOGIN_TOKEN: ${{ secrets.OC_LOGIN_TOKEN }}
          SHARED_SECRET: ${{ secrets.SHARED_SECRET }}
          SPI_GITHUB_CLIENT_ID: ${{ secrets.SPI_GITHUB_CLIENT_ID }}
          SPI_GITHUB_CLIENT_SECRET: ${{ secrets.SPI_GITHUB_CLIENT_SECRET }}
          IMAGE_CONTROLLER_QUAY_TOKEN: ${{ secrets.IMAGE_CONTROLLER_QUAY_TOKEN }}
          REDHAT_APPSTUDIO_USER_WORKLOAD: ${{ secrets.REDHAT_APPSTUDIO_USER_WORKLOAD }}
          # setting variables
          BROKER_USERNAME: "pactUser"
          MY_GIT_FORK_REMOTE: "origin"
          MY_GITHUB_ORG: "redhat-hac-qe"
          IMAGE_CONTROLLER_QUAY_ORG: "hacdev"
          SPI_TYPE: "Github"
          OC_DOWNLOAD_URL: "https://downloads-openshift-console.apps.hac-devsandbox.5unc.p1.openshiftapps.com/amd64/linux/oc.tar"
          LOGIN_SERVER_URL: "https://api.hac-devsandbox.5unc.p1.openshiftapps.com:6443"
          # Slashes have to be escaped as those variables are given to sed as a param
          SPI_API_SERVER: "https:\\/\\/api-toolchain-host-operator.apps.hac-devsandbox.5unc.p1.openshiftapps.com\\/"
          HAS_DEFAULT_IMAGE_REPOSITORY: "quay.io\\/hacdev\\/build_service"
        run: |
          # Setup GIT access
          git config --global user.name 'Katka92'
          git config --global user.email 'kkanova@redhat.com'
          
          #Setup OC and login to cluster
          oc login --token=$OC_LOGIN_TOKEN --server=$LOGIN_SERVER_URL --insecure-skip-tls-verify
          
          cp hack/preview-template.env hack/preview.env

          sed -i "s/BROKER_PASSWORD=.*/BROKER_PASSWORD=${BROKER_PASSWORD}/g" hack/preview.env
          sed -i "s/MY_GITHUB_TOKEN=.*/MY_GITHUB_TOKEN=${MY_GITHUB_TOKEN}/g" hack/preview.env
          sed -i "s/SHARED_SECRET=.*/SHARED_SECRET=${SHARED_SECRET}/g" hack/preview.env
          sed -i "s/SPI_GITHUB_CLIENT_ID=.*/SPI_GITHUB_CLIENT_ID=${SPI_GITHUB_CLIENT_ID}/g" hack/preview.env
          sed -i "s/SPI_GITHUB_CLIENT_SECRET=.*/SPI_GITHUB_CLIENT_SECRET=${SPI_GITHUB_CLIENT_SECRET}/g" hack/preview.env
          sed -i "s/HAS_DEFAULT_IMAGE_REPOSITORY=.*/HAS_DEFAULT_IMAGE_REPOSITORY=${HAS_DEFAULT_IMAGE_REPOSITORY}/g" hack/preview.env
          sed -i "s/SPI_API_SERVER=.*/SPI_API_SERVER=${SPI_API_SERVER}/g" hack/preview.env
          sed -i "s/BROKER_USERNAME=.*/BROKER_USERNAME=${BROKER_USERNAME}/g" hack/preview.env
          sed -i "s/MY_GIT_FORK_REMOTE=.*/MY_GIT_FORK_REMOTE=${MY_GIT_FORK_REMOTE}/g" hack/preview.env
          sed -i "s/MY_GITHUB_ORG=.*/MY_GITHUB_ORG=${MY_GITHUB_ORG}/g" hack/preview.env
          sed -i "s/IMAGE_CONTROLLER_QUAY_ORG=.*/IMAGE_CONTROLLER_QUAY_ORG=${IMAGE_CONTROLLER_QUAY_ORG}/g" hack/preview.env
          sed -i "s/IMAGE_CONTROLLER_QUAY_TOKEN=.*/IMAGE_CONTROLLER_QUAY_TOKEN=${IMAGE_CONTROLLER_QUAY_TOKEN}/g" hack/preview.env

          # Bootstrap the cluster
          hack/bootstrap-cluster.sh preview --toolchain --keycloak --broker
          
          # Set the docker secret to push HAS images to quay if doesn't exist yet
          if [[ ! $(oc get secrets -n build-templates | grep redhat-appstudio-user-workload) ]]; then
            echo $REDHAT_APPSTUDIO_USER_WORKLOAD >> docker.config
            oc create secret docker-registry redhat-appstudio-user-workload -n build-templates --from-file=.dockerconfigjson=docker.config
          fi
